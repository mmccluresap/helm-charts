kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
metadata:
  name: r-{{ .Values.global.region }}
spec:
  replicas: {{ default 3 .Values.controlPlane.replicas }}
  version: {{ .Values.controlPlane.version }}
  rolloutStrategy:
    rollingUpdate:
      maxSurge: 0
    type: RollingUpdate
  machineTemplate:
    infrastructureRef:
      kind: IroncoreMetalMachineTemplate
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
      name: r-{{ .Values.global.region }}
  kubeadmConfigSpec:
    initConfiguration:
      nodeRegistration:
        name: $${METAL_HOSTNAME}
        kubeletExtraArgs:
          cloud-provider: ""
        taints: []
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: ""
          secure-port: "6443"
      controllerManager:
        extraArgs:
          cloud-provider: ""
          allocate-node-cidrs: "true"
      dns:
        imageRepository: {{ .Values.images.dns.repository }}
        imageTag: {{ .Values.images.dns.tag }}
      etcd:
        local:
          dataDir: {{ .Values.images.etcdDir }}
      networking:
        dnsDomain: cluster.local
        podSubnet: {{ .Values.controlPlane.podSubnet }}
        serviceSubnet: {{ .Values.controlPlane.serviceSubnet }}
      imageRepository: {{ .Values.images.repository }}
    joinConfiguration:
      nodeRegistration:
        name: $${METAL_HOSTNAME}
        kubeletExtraArgs:
          cloud-provider: ""
        taints: []
    files:
    - content: |
        apiVersion: v1
        kind: Pod
        metadata:
          creationTimestamp: null
          name: kube-vip
          namespace: kube-system
        spec:
          containers:
          - args:
            - manager
            env:
            - name: vip_arp
              value: "true"
            - name: port
              value: "6443"
            - name: vip_interface
              value: ""
            - name: vip_cidr
              value: "32"
            - name: cp_enable
              value: "true"
            - name: cp_namespace
              value: kube-system
            - name: vip_ddns
              value: "false"
            - name: svc_enable
              value: "true"
            - name: svc_leasename
              value: plndr-svcs-lock
            - name: svc_election
              value: "true"
            - name: vip_leaderelection
              value: "true"
            - name: vip_leasename
              value: plndr-cp-lock
            - name: vip_leaseduration
              value: "15"
            - name: vip_renewdeadline
              value: "10"
            - name: vip_retryperiod
              value: "2"
            - name: address
              value: {{ .Values.controlPlane.address }}
            - name: prometheus_server
              value: :2112
            image: {{ .Values.images.kubeVip.repository }}:{{ .Values.images.kubeVip.tag }}
            imagePullPolicy: IfNotPresent
            name: kube-vip
            resources: {}
            securityContext:
              capabilities:
                add:
                - NET_ADMIN
                - NET_RAW
            volumeMounts:
            - mountPath: /etc/kubernetes/admin.conf
              name: kubeconfig
            - mountPath: /etc/hosts
              name: etchosts
          hostNetwork: true
          volumes:
          - hostPath:
              path: /etc/kubernetes/kube-vip.conf
            name: kubeconfig
          - hostPath:
              path: /etc/kube-vip.hosts
              type: File
            name: etchosts
        status: {}
      owner: root:root
      path: /etc/kubernetes/manifests/kube-vip.yaml
      permissions: "0644"

    - content: 127.0.0.1 localhost kubernetes
      owner: root:root
      path: /etc/kube-vip.hosts
      permissions: "0644"

    format: ignition
    ignition:
      containerLinuxConfig:
        additionalConfig: |-
{{ tpl .Values.controlPlane.additionalConfig . | indent 10 }}

    users:
      - name: {{ $.Values.user.name }}
        passwd: {{ $.Values.user.passwordhash }}
        groups: "sudo"
        sshAuthorizedKeys:
        - {{ $.Values.user.key | quote }}
    preKubeadmCommands:
     - hostnamectl set-hostname $${METAL_HOSTNAME}
     # match kubelet with KCP version
     - IMAGE={{ $.Values.images.kubelet.repository }}:{{ .Values.controlPlane.version }}
     - while true; do ctr image pull $IMAGE && break; done
     - TMPMOUNT=$(mktemp -d --suffix=.ctrcp)
     - trap "umount -l ${TMPMOUNT} || true; rmdir ${TMPMOUNT}" EXIT
     - ctr image mount $IMAGE $TMPMOUNT >/dev/null
     - cp --preserve=mode ${TMPMOUNT}/usr/local/bin/kubeadm ${TMPMOUNT}/usr/local/bin/kubelet /usr/bin/
     - if mountpoint -q ${TMPMOUNT}; then umount -l ${TMPMOUNT}; fi
     - if [ -d ${TMPMOUNT} ]; then rmdir ${TMPMOUNT}; fi
     # avoid running kubeadm on L1 interface - wait for bond
     # https://www.freedesktop.org/software/systemd/man/latest/systemd-networkd-wait-online.service.html
     - /usr/lib/systemd/systemd-networkd-wait-online -i {{ .Values.controlPlane.uplinkInterface }} --ipv4 --timeout 0
    postKubeadmCommands:
     # https://github.com/kube-vip/kube-vip/issues/684
     - while true; do if [ -f /etc/kubernetes/super-admin.conf ]; then ln -sf /etc/kubernetes/super-admin.conf /etc/kubernetes/kube-vip.conf && break; elif [ -f /etc/kubernetes/admin.conf ] && [ ! -d /etc/kubernetes/admin.conf ]; then ln -sf /etc/kubernetes/admin.conf /etc/kubernetes/kube-vip.conf && break; else echo "Neither /etc/kubernetes/super-admin.conf nor /etc/kubernetes/admin.conf is a valid file" >&2; sleep 5; fi; done
